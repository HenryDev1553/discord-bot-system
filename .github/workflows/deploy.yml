name: Deploy Discord Bot to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -c "import discord; print('Discord.py OK')"
        python -c "import flask; print('Flask OK')"
        echo "‚úÖ Basic imports successful"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        script: |
          echo "üöÄ Starting deployment..."
          
          # Navigate to project directory
          cd /home/discord-bot/discord-booking-bot
          
          # Pull latest changes
          sudo -u discord-bot git fetch origin
          sudo -u discord-bot git reset --hard origin/main
          
          # Update dependencies
          sudo -u discord-bot bash -c "
            cd /home/discord-bot/discord-booking-bot
            source venv/bin/activate
            pip install -r requirements.txt --upgrade
          "
          
          # Restart service
          systemctl restart discord-bot
          sleep 5
          
          # Check service status
          if systemctl is-active --quiet discord-bot; then
            echo "‚úÖ Discord bot service is running"
          else
            echo "‚ùå Discord bot service failed to start"
            systemctl status discord-bot --no-pager
            exit 1
          fi
          
          # Health check
          curl -f http://localhost:5001/health || echo "‚ö†Ô∏è Health check failed"
          
          echo "üéâ Deployment completed successfully!"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi